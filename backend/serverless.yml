service: movie-management-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'prod'}
  region: ${opt:region, 'eu-west-1'}
  memorySize: 512
  timeout: 30
  environment:
    NODE_ENV: production
    DB_CONN_STRING: ${env:DB_CONN_STRING, 'mongodb://localhost:27017'}
    DB_NAME: ${env:DB_NAME, 'moviedb'}
    JWT_SECRET: ${env:JWT_SECRET, 'kevinproject_secure_jwt_secret_key_2025'}
    JWT_EXPIRATION: ${env:JWT_EXPIRATION, '24h'}
  
  # Enable API Gateway CORS with proper configuration
  httpApi:
    cors:
      allowedOrigins:
        - '*'
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Amz-Date
        - X-Api-Key
        - X-Amz-Security-Token
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowCredentials: true
      maxAge: 86400 # 24 hours in seconds

package:
  individually: true
  exclude:
    - node_modules/**
    - src/**
    - .env
    - .git/**
    - '*.log'
  include:
    - build/**
    - package.json

functions:
  # Main API handler
  api:
    handler: build/serverless.handler
    events:
      - httpApi:
          path: /api/{proxy+}
          method: ANY
    environment:
      FUNCTION_TYPE: api
    package:
      include:
        - build/index.js
        - build/serverless.js
        - build/controllers/**
        - build/models/**
        - build/routes/**
        - build/middleware/**
        - build/database.js

  # Lambda functions for recommendations and analytics
  lambda:
    handler: build/lambda/serverless.handler
    events:
      - httpApi:
          path: /lambda/{proxy+}
          method: ANY
    environment:
      FUNCTION_TYPE: lambda
    package:
      include:
        - build/lambda/**

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3001
  dotenv:
    path: ./.env
